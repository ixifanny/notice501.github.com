<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：mac | Code Rush]]></title>
  <link href="http://notice501.github.com/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://notice501.github.com/"/>
  <updated>2013-07-22T09:52:43+08:00</updated>
  <id>http://notice501.github.com/</id>
  <author>
    <name><![CDATA[foocoder]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我在用的mac软件(2)-终端环境之zsh和z(*nix都适用)]]></title>
    <link href="http://notice501.github.com/blog/wo-zai-yong-de-macruan-jian-2.html/"/>
    <updated>2013-07-18T20:53:00+08:00</updated>
    <id>http://notice501.github.com/blog/wo-zai-yong-de-macruan-jian-2</id>
    <content type="html"><![CDATA[<p>继续上篇介绍我的终端环境。这篇介绍zsh和z，其实这不局限于os x，在所有的*nix系统中都是可用的。</p>

<h1 id="zsh">zsh</h1>

<p>zsh作为bash的替代品，自然很多人要问：why zsh？
 在<a href="http://www.acm.uiuc.edu/workshops/zsh/why.html">Zsh Workshop</a> 有个长长的功能列表，用来回答这个问题。这里讲下我选择zsh的原因，当然，也是介绍zsh强大的功能。</p>

<ol>
  <li>兼容bash。这使得切换到zsh没有任何成本。</li>
  <li>OS X默认的bash版本实在是太老了啊……</li>
  <li>拼写纠正。你总会不小心打错命令。这时，zsh会进行自动拼写纠正，如图：<img src="http://foocoder.com/images/mac/cerrect.png" alt="" /></li>
  <li>更强大的补全。
 <!--more-->
    <ul>
      <li>连按两次tab会列出所有的补全列表并直接开始选择。如图：<img src="http://foocoder.com/images/mac/tabcd.png" alt="" />
 	并且可以用方向键来选择，但是对我这种很少用方向键的人来说只能猛敲tab了么，不是，zsh支持使用<code>&lt;ctrl-n/p/f/b&gt;</code>来选择，perfect!</li>
      <li>命令选项补全。有多少人依然记不住tar的命令选项？中枪的去抄20遍……在zsh中只需要键入<code>tar - &lt;tab&gt;</code>就会列出所有的选项和帮助说明。用了zsh之后<code>man</code>少用了好多……</li>
      <li>命令参数补全。zsh 对命令的参数补全也很强大。键入<code>kill &lt;tab&gt;</code>就会列出所有的进程名和对应的进程号。如图：<img src="http://foocoder.com/images/mac/kill2.png" alt="" />这还不够，试试键入<code>kill sbin &lt;tab&gt;</code>,如图所示<img src="http://foocoder.com/images/mac/kill1.png" alt="" />，自动为sbin这个进程名补全了进程号。kill进程再也不用两步操作了。</li>
    </ul>
  </li>
  <li>更智能的历史命令。在用<ctrl-p>或者`方向上键`查找历史命令时，zsh支持限制查找。比如，输入`ls `然后再按方向上键,则只会查找用过的ls命令。而此时使用`<ctrl-p>`则会仍然按之前的方式查找，忽略`ls`。</ctrl-p></ctrl-p></li>
  <li>多个终端会话共享历史记录。经常有多个窗口，tab，tmux的多个session，panel。这些命令历史不能共享实在是很糟糕的回忆。但是有了zsh之后，这些确实成了回忆了,所有的命令历史都可以共享。</li>
  <li>更智能的<code>cd</code>。首先你甚至不需要再输入cd了，直接输入路径即可。第二，在你知道路径的情况下，比如<code>/usr/local/bin</code>你可以输入<code>cd /u/l/b</code>然后按<code>&lt;Tab&gt;</code>进行补全快速输入。这显然不够，zsh还支持路径替换，如果你其实想进入的是<code>/usr/local/bin</code>，不再需要<code>../</code> 了，直接在当前输入<code>cd bin share</code>即可，则<code>bin</code>会替换为<code>share</code>。在之后我会介绍z和autojumper，目录跳转会更方便。 </li>
  <li>更强大的alias。zsh不仅支持普通的alias，例如：<code>alias ls ='ls --color=auto'</code>。zsh还支持后缀alias,即以什么命令打开特定的后缀名文件。例如<code>alias -s js=mvim</code>,输入<code>hello.js</code>，会以vim打开该文件,而不在需要<code>vim hello.js</code>。</li>
  <li>通配符搜索。这也是我最爱的功能之一。之前讲过由于命令补全少用了很多<code>man</code>命令，而这个功能让我少用了很多<code>find</code>命令。	一般的通配符搜索无非是<code>ls -l *.log</code>,如图:<img src="http://foocoder.com/images/mac/ls1.png" alt="" />。在zsh中可以做到递归的通配符搜索。使用<code>**/</code>来递归搜索，如图<img src="http://foocoder.com/images/mac/ls2.png" alt="" />.是不是在很多场景下可以取代<code>find</code>？</li>
</ol>

<p>以上都是我感觉迁移到zsh之后非常实用的功能。要想从头开始了解和学习zsh，可以访问<a href="http://zsh.sourceforge.net/Guide/zshguide.html">A User’s Guide to the Z-Shell</a>。不过大家都很忙，从头开始自己学习和配置会很累。所以现在说到zsh，不得不提的就是<a href="">oh-my-zsh</a>,oh-my-zsh是一个开源的zsh配置管理框架，提供了大量实用的功能，主题等。现在基本都是标配了吧。如图是我在用的默认zsh主题<code>robbyrussell</code>，如图<img src="http://foocoder.com/images/mac/gitoh.png" alt="" />可以发它能自动显示当前所在的git分支以及当前本地状态（黄色的小叉表示本地有更新未提交）。</p>

<p>当然zsh也不是完美无缺。在我使用过程中有两点不是很舒服：
1. 自动纠正并不总是那么智能。如图：<img src="http://foocoder.com/images/mac/wrongcorrect.png" alt="" />
2. 一些符号是zsh中保留的，使用需要转义，如图：<img src="http://foocoder.com/images/mac/zhuanyi.png" alt="" /></p>

<hr />

<p>下面讲下zsh和oh-my-zsh的安装。</p>

<p><strong>使用brew来安装zsh</strong></p>

<p><code>
  brew install zsh
</code></p>

<p><strong>设置zsh为默认</strong></p>

<p>在<code>/etc/shells</code>文件末尾添加</p>

<p><code>
 /usr/local/bin/zsh
</code>	</p>

<p>执行：</p>

<p><code>
 chsh -s /usr/local/bin/zsh
</code></p>

<p>最后记得将<code>~/.bash_prorile</code>或者<code>~/.profile</code>等配置拷贝到~/.zshrc中。</p>

<p><strong>安装oh-my-zsh</strong></p>

<p>自动安装:</p>

<p><code>
curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh
</code></p>

<p>可以选择自己喜欢的<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes">主题</a>。只需要修改<code>~/.zshrc</code>文件中的<code>ZSH_THEME</code>即可。</p>

<h1 id="zautojump">z和autojump</h1>

<p><a href="https://github.com/rupa/z">z</a>和<a href="https://github.com/joelthelion/autojump">autojump</a>的功能类似，前者是简单的shell脚本实现，后者由python实现，功能都是可以方便自动匹配到你最多使用的目录并跳转。我在用的是z，如图，我在根目录输入<code>z github</code>可以自动跳转到我常用的<code>notice501.github.com</code>这个目录，也就是本博客的工程目录。超级方便的工具。autojump用法类似，命令为<code>j</code>而不是<code>z</code>两者的安装方式：</p>

<p><strong>z</strong></p>

<p><code>
git clone git@github.com:rupa/z.git
</code></p>

<p>而后将z.sh放入环境变量即可。</p>

<p><strong>autojump</strong></p>

<p>autojump可以直接使用brew安装</p>

<p><code>
brew install autojump
</code></p>

<p>有问题和分享欢迎留言交流。也欢迎关注我的<a href="http://weibo.com/notice520">微博</a>。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我在用的mac软件(1)--终端环境之iTerm2]]></title>
    <link href="http://notice501.github.com/blog/wo-zai-yong-de-macruan-jian.html/"/>
    <updated>2013-07-14T20:42:00+08:00</updated>
    <id>http://notice501.github.com/blog/wo-zai-yong-de-macruan-jian</id>
    <content type="html"><![CDATA[<p>之前一直有朋友要我分享下在用的mac软件，今天有空就来写一下，可能不止于软件，会有一些配置或者工具，或者叫环境更合适。有些可能一句话带过，有些会详细介绍。也不分类了，想到哪个就写出来。如果已经写的足够长了，就会分几篇来写。</p>

<h3 id="iterm2zshtmux">iTerm2+zsh+tmux的终端环境</h3>

<h5 id="iterm2">iTerm2</h5>

<p>其实现在os x的terminal已经做的很好了，但是iTerm2的功能依然要更强大一些。简述下优点和常用功能：</p>

<ul>
  <li>
    <p>开源免费。 </p>
  </li>
  <li>兼容性比默认Terminal更好。
    <ul>
      <li>对于经常要远程使用的情况下，默认的Terminal在使用vi时经常出现不兼容的问题，而iTerm2在这方面显然做的更好。</li>
    </ul>
  </li>
  <li>快捷键丰富。
    <ul>
      <li><code>⌘ + 数字</code>:  切换标签页。 <code>⌘ + 方向键</code> 按方向切换标签页。</li>
      <li><code>⌘ + enter</code>: 切换全屏
<!--more--></li>
      <li><code>⌘ + f</code>: 查找。支持正则。其中查找的内容会被自动复制。省去了再去⌘+c的步骤。同样，鼠标去选中的内容也会自动复制，也可以鼠标中键直接粘贴。一般在使用时，键入搜索关键词，然后用<code>shift-tab</code>或者<code>tab</code>左右自动补全，<code>option + enter</code>则自动将搜索结果键入，并且复制到剪贴板。</li>
      <li><code>⌘ + d</code>: 垂直分屏，<code>⌘ + shift + d</code>: 水平分屏。使用<code>⌘ + ]</code>和<code>⌘ + [</code>在最近使用的分屏直接切换.而<code>⌘ + opt + 方向键</code>切换到指定位置的分屏。</li>
      <li><code>⌘ + t</code> :新的标签页</li>
      <li><code>⌘ + w</code> :关闭当前标签页</li>
      <li><code>⌘ + ；</code>:自动补全历史命令。如图:<img src="http://foocoder.com/images/mac/autocom.png" alt="自动补全" /></li>
      <li><code>⌘ + shift + h</code>: 剪贴板历史，如图：<img src="http://foocoder.com/images/mac/history.png" alt="剪贴板历史" /></li>
      <li><code>ctrl + u</code>: 清空当前行。这里要注意，mac默认的ctrl+u为清楚当前光标至行首的内容，在iTerm2中则直接清除本行。iTerm2 也支持其他常用的操作命令，这里顺带讲下，因为这些命令都是mac下非常常用也很好用的：
        <ul>
          <li><code>ctrl + a</code>: 到行首	</li>
          <li><code>ctrl + e</code>: 行末</li>
          <li><code>ctrl + f/b</code>: 前进后退，相当于左右方向键，但是显然比移开手按方向键更快 		</li>
          <li><code>ctrl + p</code>: 上一条命令，相当于方向键上</li>
          <li><code>ctrl + r</code>: 搜索命令历史，这个大家都应该很熟悉了</li>
          <li><code>ctrl + d</code>: 删除当前字符</li>
          <li><code>ctrl + h</code>: 删除之前的字符</li>
          <li><code>ctrl + w</code>: 删除光标前的单词</li>
          <li><code>ctrl + k</code>: 删除到文本末尾</li>
          <li><code>ctrl + t</code>: 交换光标处文本</li>
        </ul>
      </li>
      <li><code>⌘ + —/+/0</code>: 调整字体大小</li>
      <li><code>⌘ + r</code>:清屏，其实是滚到新的一屏，并没有清空。ctrl + l 也可以做到。</li>
    </ul>
  </li>
  <li>更多实用功能。
    <ul>
      <li>Exposé 标签 按<code>⌘ + opt + e </code>打开Exposé，并支持搜索。如图：<img src="http://foocoder.com/images/mac/expose.png" alt="Exposé" /></li>
      <li>全局呼出快捷键。如图：
<img src="http://foocoder.com/images/mac/hotkeys.png" alt="呼出快捷键" /></li>
      <li><code>⌘ + /</code>: 找到当前光标位置，有时会很有用。</li>
      <li><code>shift + ⌘ + s</code>: 保存当前窗口快照。</li>
      <li><code>⌘ + opt + b</code>: 快照回放。很有意思的功能，你可以对你的操作根据时间轴进行回放。可以拖动下方的时间轴，也可以按左右方向键。如图：<img src="http://foocoder.com/images/mac/replay.png" alt="快照回放" /></li>
    </ul>
  </li>
  <li>支持256色。方便配置vi配色。但是在某些远超服务器上不支持256色，则只要在Prefences-&gt;Profiles-&gt;Terminal里设置为xterm。</li>
</ul>

<hr />

<p>光写个iTerm2没想到就写了这么多，稍微打了下腹稿，后面zsh + tmux 肯定比这里还要多。下篇继续吧。</p>

]]></content>
  </entry>
  
</feed>
